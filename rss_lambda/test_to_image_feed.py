import unittest
from typing import List, Tuple
from .to_image_feed.to_image_feed import to_image_feed
from .test_utils import nitter_rss20_response


def nitter_rss20_response_with_guid(description_html_and_guids: List[Tuple[str, str]]):
    def description_html_to_xml(description_html_and_guid: Tuple[str, str]) -> str:
        return f"""<item>
    <title>title</title>
    <dc:creator>@twitter_handle</dc:creator>
    <description><![CDATA[{description_html_and_guid[0]}]]></description>
    <pubDate>{"Sat, 06 Jan 2024 07:06:54 GMT"}</pubDate>
    <guid>{description_html_and_guid[1]}</guid>
    <link>http://nitter.example.com/twitter_handle/status/-1#m</link>
</item>"""

    return f"""<?xml version="1.0" encoding="UTF-8"?>
<rss xmlns:atom="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/" version="2.0">
  <channel>
    <atom:link href="http://nitter.example.com/twitter_handle/rss" rel="self" type="application/rss+xml"/>
    <title>twitter_handle / @twitter_handle</title>
    <link>http://nitter.example.com/twitter_handle</link>
    <description>Twitter feed for: @twitter_handle. Generated by nitter.example.com
</description>
    <language>en-us</language>
    <ttl>40</ttl>
    {'\n'.join(map(description_html_to_xml, description_html_and_guids))}
</channel>
</rss>"""


class ToImageFeedTestCase(unittest.TestCase):
    def setUp(self):
        self.maxDiff = None

    def test_to_image_feed(self):
        rss_text = nitter_rss20_response([
            '<p>some random text</p>',
            '<p>also some random texts</p><p>but without images haha</p>',
            '<p>also some random texts<br>but without images haha 2222</p> ',
            '<p>also some random texts but with images hahahaha</p><img src="https://nitter.example.com/twitter_handle/pic/pic1.jpg" /><img src="https://nitter.example.com/twitter_handle/pic/pic2.jpg" />',
            '<p>also some random texts but with images hahahaha</p><img src="https://nitter.example.com/twitter_handle/pic/pic3.jpg" />',
            '<p>also some random texts but with a lot of images hahahaha</p><img src="https://nitter.example.com/twitter_handle/pic/pic4.jpg" /><img src="https://nitter.example.com/twitter_handle/pic/pic5.jpg" /><img src="https://nitter.example.com/twitter_handle/pic/pic6.jpg" /><img src="https://nitter.example.com/twitter_handle/pic/pic7.jpg" /><img src="https://nitter.example.com/twitter_handle/pic/pic8.jpg" />',
        ])
        self.assertEqual(
            to_image_feed(rss_text),
            nitter_rss20_response_with_guid([
                ('<img src="https://nitter.example.com/twitter_handle/pic/pic1.jpg"></img>', "http://nitter.example.com/twitter_handle/status/-1#m#0082835d2bff049a1bc59e9b84ff09b80ab63957d6d7281ce2def79789848e42"),
                ('<img src="https://nitter.example.com/twitter_handle/pic/pic2.jpg"></img>', "http://nitter.example.com/twitter_handle/status/-1#m#f1a353fb4ea5acda598a4f7883e83c17771cf876e2a63b3969d441e4679279d7"),
                ('<img src="https://nitter.example.com/twitter_handle/pic/pic3.jpg"></img>', "http://nitter.example.com/twitter_handle/status/-1#m#50e91838b86fadd360fe9d17e896f08da8fece8e9f3b8256789f3ae3941e720e"),
                ('<img src="https://nitter.example.com/twitter_handle/pic/pic4.jpg"></img>', "http://nitter.example.com/twitter_handle/status/-1#m#cbc0f68a50eee9919e567c817816c2caa96fcfd7d2732e9c4ed9f48331a7f449"),
                ('<img src="https://nitter.example.com/twitter_handle/pic/pic5.jpg"></img>', "http://nitter.example.com/twitter_handle/status/-1#m#8f3ad6b81214c231a6f53a37dac1455d4b04e9be0f7e2bdfadf1ac5698cb2f96"),
                ('<img src="https://nitter.example.com/twitter_handle/pic/pic6.jpg"></img>', "http://nitter.example.com/twitter_handle/status/-1#m#23c5c34f8122b70044e28a2902e666e51d6baf92360b39e39cf6114b621ca626"),
                ('<img src="https://nitter.example.com/twitter_handle/pic/pic7.jpg"></img>', "http://nitter.example.com/twitter_handle/status/-1#m#362a27ca9602d2cdf012faeeae96594aa2080f2070b6f072a00a58917ee2139c"),
            ])
        )
